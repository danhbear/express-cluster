// Generated by CoffeeScript 1.6.2
(function() {
  var ClusterCache, NodeCache, Q;

  Q = require("q");

  NodeCache = require("node-cache");

  ClusterCache = (function() {
    function ClusterCache() {}

    ClusterCache.prototype.getId = function() {
      return Math.random().toString();
    };

    ClusterCache.prototype.registerWorker = function(worker, config) {
      var _ref, _ref1,
        _this = this;

      if (config == null) {
        config = {};
      }
      if (this.cache == null) {
        this.cache = new NodeCache({
          stdTTL: (_ref = config.cacheTTL) != null ? _ref : 60,
          checkperiod: (_ref1 = config.cacheCheckPeriod) != null ? _ref1 : 30
        });
      }
      return worker.on("message", function(msg) {
        if (msg.cmd === "cacheGetRequest") {
          return _this.cache.get(msg.key, function(error, value) {
            var resp;

            if (config.verbose) {
              console.log("ClusterCache cache get error=" + error + " value=" + (JSON.stringify(value)));
            }
            resp = {
              cmd: "cacheGetResponse",
              id: msg.id
            };
            if (error != null) {
              resp.error = error;
            } else if ((value != null ? value[msg.key] : void 0) != null) {
              resp.value = value[msg.key];
            } else {
              resp.error = "not found or expired";
            }
            return worker.send(resp);
          });
        } else if (msg.cmd === "cacheSetRequest") {
          return _this.cache.set(msg.key, msg.value, function(error, success) {
            var resp;

            if (config.verbose) {
              console.log("ClusterCache cache set error=" + error + " success=" + success);
            }
            resp = {
              cmd: "cacheSetResponse",
              id: msg.id
            };
            if (error != null) {
              resp.error = error;
            } else {
              resp.success = success;
            }
            return worker.send(resp);
          });
        }
      });
    };

    ClusterCache.prototype.get = function(key) {
      var deferred, id, workerListener;

      deferred = Q.defer();
      id = this.getId();
      workerListener = function(msg) {
        if (msg.cmd === "cacheGetResponse" && msg.id === id) {
          process.removeListener("message", workerListener);
          if (msg.error != null) {
            return deferred.reject(msg.error);
          } else {
            return deferred.resolve(msg.value);
          }
        }
      };
      process.on("message", workerListener);
      process.send({
        cmd: "cacheGetRequest",
        id: id,
        key: key
      });
      return deferred.promise;
    };

    ClusterCache.prototype.set = function(key, value) {
      var deferred, id, workerListener;

      deferred = Q.defer();
      id = this.getId();
      workerListener = function(msg) {
        if (msg.cmd === "cacheSetResponse" && msg.id === id) {
          process.removeListener("message", workerListener);
          if (msg.error != null) {
            return deferred.reject(msg.error);
          } else {
            return deferred.resolve(msg.success);
          }
        }
      };
      process.on("message", workerListener);
      process.send({
        cmd: "cacheSetRequest",
        id: id,
        key: key,
        value: value
      });
      return deferred.promise;
    };

    return ClusterCache;

  })();

  module.exports = new ClusterCache();

}).call(this);
